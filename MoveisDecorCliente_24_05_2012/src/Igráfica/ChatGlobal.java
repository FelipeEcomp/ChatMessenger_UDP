/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ChatGlobal.java
 *
 * Created on 30/04/2012, 15:06:54
 */
package Igráfica;

import java.io.IOException;
import java.net.DatagramPacket;
import java.net.InetAddress;
import java.net.MulticastSocket;
import java.net.SocketException;
import java.net.UnknownHostException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import moveisdecor.*;

/**
 *
 * @author Felipe 
 */
public class ChatGlobal extends javax.swing.JFrame {

    static Broadcast conversa = new Broadcast();
    static grafLogin log = new grafLogin();
    private static boolean Broadcast = false;
    private static String IP;
    private static String login;
    private static Tabela tabela;
    private static String hist;
    private static SolicitacaoUnicast ouvirUnicast;
    
    /** Creates new form ChatGlobal */
    public ChatGlobal(Broadcast conversa, Tabela tabela, SolicitacaoUnicast ouvirUnicast) throws Exception {

        
        
        ChatGlobal.tabela = tabela;
        ChatGlobal.conversa = conversa;
        initComponents();
        visGlobal.setEditable(false);
        setLocationRelativeTo(null); // Centraliza Janela

        //  tabela.setChatGlobal(this);
        tabela.setConversa(conversa);


        // Obtem o modelo da JTable  



        for (int i = 0; i < Tabela.getSize(); i++) {
            ((DefaultTableModel) jTable1.getModel()).addRow(Tabela.getListaNomes()[i]);

        }
        //  jTable1.setAutoCreateRowSorter(true); //permite alterar a ordem da tabela
        setChat();
        System.out.println("AQUI EU VEJO SE UM LOGIN JÁ VAI NULL: " +login);
      // PARA QUE A JANELA ABRA QUANDO FOR SOLICITADA UMA CONVERSA
      //ChatGlobal.ouvirUnicast = ouvirUnicast;
     // Thread t= new Thread(ouvirUnicast);
      // t.start();
    }

    public ChatGlobal() throws Exception {



        initComponents();
       // ouvirUnicast.setTabela(tabela); //isso aqui é pra atualizar a referencia da variavell tabela sempre que a tabela for reenviada ao chat global
        
        visGlobal.setEditable(false);
        setLocationRelativeTo(null); // Centraliza Janela
        // tabela.setChatGlobal(this);
        setMsgAttTabela();


        // Obtem o modelo da JTable  



        for (int i = 0; i < Tabela.getSize(); i++) {
            ((DefaultTableModel) jTable1.getModel()).addRow(Tabela.getListaNomes()[i]);

        }
        //  jTable1.setAutoCreateRowSorter(true); //permite alterar a ordem da tabela




    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        visGlobal = new javax.swing.JTextArea();
        CampoEscrita = new javax.swing.JFormattedTextField();
        Enviar = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        grupos = new javax.swing.JButton();
        NomeUser = new javax.swing.JLabel();
        particular = new javax.swing.JButton();
        Sair = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jPanel1.setBackground(new java.awt.Color(255, 246, 230));

        visGlobal.setColumns(20);
        visGlobal.setFont(new java.awt.Font("Arial", 0, 14));
        visGlobal.setRows(5);
        jScrollPane1.setViewportView(visGlobal);

        CampoEscrita.setFont(new java.awt.Font("Arial", 0, 14));
        CampoEscrita.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CampoEscritaActionPerformed(evt);
            }
        });

        Enviar.setText("Enviar");
        Enviar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EnviarActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Usuários Online"
            }
        ));
        jScrollPane2.setViewportView(jTable1);

        jLabel1.setFont(new java.awt.Font("Viner Hand ITC", 0, 48));
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Igráfica/novo-2.jpg"))); // NOI18N

        grupos.setText("Grupos");
        grupos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gruposActionPerformed(evt);
            }
        });

        NomeUser.setFont(new java.awt.Font("Comic Sans MS", 1, 18));
        NomeUser.setText("Nome do usuário");

        particular.setText("Particular");
        particular.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                particularActionPerformed(evt);
            }
        });

        Sair.setText("Sair");
        Sair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SairActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(NomeUser)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(CampoEscrita, javax.swing.GroupLayout.PREFERRED_SIZE, 547, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(Enviar, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(Sair, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(particular, javax.swing.GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE)
                                        .addComponent(grupos, javax.swing.GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE)))
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 628, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addContainerGap()))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(170, 170, 170))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(13, 13, 13)
                .addComponent(NomeUser)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 334, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(CampoEscrita, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(particular, javax.swing.GroupLayout.DEFAULT_SIZE, 34, Short.MAX_VALUE)
                            .addComponent(Enviar, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(7, 7, 7)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(grupos, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Sair, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void EnviarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EnviarActionPerformed



        //  for( int i=0; i<=1;i++){       
        String texto = login + ": " + CampoEscrita.getText();


        try {
            conversa.BroadcastEnvia(texto); //envia o texto pro grupo broadcast
        } catch (IOException ex) {
            Logger.getLogger(ChatGlobal.class.getName()).log(Level.SEVERE, null, ex);
        }
        //      } 




    }//GEN-LAST:event_EnviarActionPerformed

    private void setMsgAttTabela() { //quando alguem logar, a conversa não eh perdida
        visGlobal.setText(hist);

    }

    private void setChat() {
        tabela.setChatGlobal(this);
    }

    public void setMsg(String Texto) {//envia a mensagem pra interface do grupo
        hist = visGlobal.getText();
        visGlobal.setText(hist + "\n" + Texto.trim());
        // O método trim() remove os espaços em branco após a string 

    }

    public void setName() {//seta o nome do cliente na interface
        NomeUser.setText(login);
        
    }

    private void gruposActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gruposActionPerformed
        Grupos grupo = new Grupos();
        grupo.setVisible(true);


    }//GEN-LAST:event_gruposActionPerformed

    private void CampoEscritaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CampoEscritaActionPerformed
//  for( int i=0; i<=1;i++){       
        String texto = login + ": " + CampoEscrita.getText();


        try {
            conversa.BroadcastEnvia(texto);
        } catch (IOException ex) {
            Logger.getLogger(ChatGlobal.class.getName()).log(Level.SEVERE, null, ex);
        }
        //      } 
    }//GEN-LAST:event_CampoEscritaActionPerformed

    private void particularActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_particularActionPerformed
        int selected = jTable1.getSelectedRow();
        
        //VAI MANDAR ESSE INT PROCURAR NO VETOR DE IPS
        //IP ENVIADO PARA O CHAT PRIVATE
        
        ChatPrivate priv = new ChatPrivate(selected, tabela);
        try {
//            ouvirUnicast.SolicitacaoUnicastEnvia(selected); PARA QUE A JANELA ABRA QUANDO FOR SOLICITADA UMA CONVERSA
        } catch (Exception ex) {
            Logger.getLogger(ChatGlobal.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        Unicast uni = new Unicast(priv);
        Thread uniThread = new Thread(uni);
        uniThread.start(); //thread do unicast
        
        TransfArquivo trans = new TransfArquivo();
        Thread transThread = new Thread(trans);
        transThread.start(); //thread para aceitar arquivos
        
    //  priv.setIP(IP);  DEPOIS DE IMPLEMENTAR A TABELA DE IPS, TIRAR ESSE COMENTARIO E DEIXAR O METODO    
        priv.setVisible(true);
        priv.setLogin(login);
        
        
      
        
        
        
        
        
        
        
        
        

    }//GEN-LAST:event_particularActionPerformed

    private void SairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SairActionPerformed
//QUANDO SAIR, A LISTA SERÁ ATUALIZADA

        for (int i = 0; i < Tabela.getSize(); i++) {

            if (login.equals(Tabela.getListaNomes()[i][0])) { //apaga o cara a tabela quando ele desloga
                try {
                    System.out.println("Posiçao a ser apagada "+i);
                        Tabela.deletarTabela(i);
                } catch (SocketException ex) {
                    Logger.getLogger(ChatGlobal.class.getName()).log(Level.SEVERE, null, ex);
                } catch (UnknownHostException ex) {
                    Logger.getLogger(ChatGlobal.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(ChatGlobal.class.getName()).log(Level.SEVERE, null, ex);
                }
                 i=Tabela.getSize(); //envia a posição da tabela para ser excluida
            }

        }
System.exit(0); //fecha o sistema
        
    }//GEN-LAST:event_SairActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFormattedTextField CampoEscrita;
    private javax.swing.JButton Enviar;
    private javax.swing.JLabel NomeUser;
    private javax.swing.JButton Sair;
    private javax.swing.JButton grupos;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton particular;
    private javax.swing.JTextArea visGlobal;
    // End of variables declaration//GEN-END:variables

    void setLogin(String login) {
        ChatGlobal.login = login;
    }
}
